-- SQLBook: Code
-- Deploy yumelio:yumelio_v1 to pg

-- This script was generated by a beta version of the ERD tool in pgAdmin 4.

BEGIN;

--~ Create domain
--& Vérification de l'email
CREATE DOMAIN EMAIL AS TEXT CHECK (
    -- VALUE ~ '^(?#email)[a-zA-Z0-9.-_]+@[\w-]+(?:\.[\w-]{2,4})$'
    VALUE ~ '^(?#email)[-a-zA-Z0-9.-_]+@[\w-]+(?:\.[\w-]{2,4})$'
);

--& Vérification du password
-- Minimum 8 caractères - comprenant au moins un chiffre, une minuscule, une majuscule, un caractère spécial minimum
CREATE DOMAIN PWD AS TEXT CHECK (
    VALUE ~ '^(?#password)(?=.*[0-9])(?=.*[-a-z])(?=.*[-A-Z])(?=.*[!@#$%^&*()_+-=[]{};\':"\\|,.<>/?]).{8,}$'
);

--& Vérification de l'url
-- Source : https://stackoverflow.com/questions/3825676/postgresql-regex-word-boundaries
-- Postgres accepte \M pour 'boundaries end word' mais attention
-- Regex classique \b
CREATE DOMAIN LINK_URL AS TEXT CHECK (
    VALUE ~ '((https?:\/\/)|(www.))[a-zA-Z0-9.@:%._+~#=]{1,}.[-a-zA-Z0-9()]{1,}\.[-a-z]{1,6}\M'
);

CREATE TABLE IF NOT EXISTS "user"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "first_name" TEXT,
    "last_name" TEXT,
    "email" EMAIL NOT NULL UNIQUE,
    "password" PWD NOT NULL,
    "linkedin_url" LINK_URL NULL,
    "github_url" LINK_URL NULL,
    "instagram_url" LINK_URL NULL,
    "role_id" INTEGER NOT NULL DEFAULT 2
);

CREATE TABLE IF NOT EXISTS "role"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "article"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "title" TEXT NOT NULL,
    "abstract" TEXT NOT NULL,
    "content" TEXT NOT NULL,
    "order" SERIAL,
    "user_id" INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS "project"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "title" TEXT NOT NULL,
    "abstract" TEXT NOT NULL,
    "content" TEXT NOT NULL,
    "picture" LINK_URL NOT NULL,
    "is_active" BOOLEAN NOT NULL DEFAULT TRUE,
    "date" TEXT NOT NULL,
    "user_id" INTEGER NOT NULL,
    "link" LINK_URL NULL
);

CREATE TABLE IF NOT EXISTS "gb_ticket"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "content" TEXT NOT NULL,
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "user_id" INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS "category"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL,
    "logo" TEXT NOT NULL,
    "color" TEXT
);

CREATE TABLE IF NOT EXISTS "project_has_category"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "project_id" INTEGER NOT NULL,
    "category_id" INTEGER NOT NULL,
    UNIQUE ("project_id", "category_id")
);

CREATE TABLE IF NOT EXISTS "article_has_category"
(
    "id" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    "article_id" INTEGER NOT NULL,
    "category_id" INTEGER NOT NULL,
    UNIQUE ("article_id", "category_id")
);

ALTER TABLE IF EXISTS "user"
    ADD FOREIGN KEY ("role_id")
    REFERENCES "role" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "article"
    ADD FOREIGN KEY ("user_id")
    REFERENCES "user" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "project"
    ADD FOREIGN KEY ("user_id")
    REFERENCES "user" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "gb_ticket"
    ADD FOREIGN KEY ("user_id")
    REFERENCES "user" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS "project_has_category"
    ADD FOREIGN KEY ("project_id")
    REFERENCES "project" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS "project_has_category"
    ADD FOREIGN KEY ("category_id")
    REFERENCES "category" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS "article_has_category"
    ADD FOREIGN KEY ("article_id")
    REFERENCES "article" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS "article_has_category"
    ADD FOREIGN KEY ("category_id")
    REFERENCES "category" ("id") 
    MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;

--~ Creates composite indexation

CREATE INDEX "article_brin_idx" ON "article" 
USING BRIN ("title", "abstract", "content", "order");

CREATE INDEX "project_brin_idx" ON "project" 
USING BRIN ("title", "abstract", "content", "picture", "date", "link");

CREATE INDEX "gb_ticket_brin_idx" ON "gb_ticket" 
USING BRIN ("content");

CREATE INDEX "category_brin_idx" ON "category" 
USING BRIN ("name");

END;

